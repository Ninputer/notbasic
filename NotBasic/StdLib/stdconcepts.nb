
'notbasic standard concepts
'this file defines the concepts required by the language runtime

'=====required by 'for each' statement=====
type IEnumerable<T>

end

type IEnumerator

end

decl fun GetEnumerator(select me:IEnumerable<T>):IEnumerator<T>

'concept Enumerable<T, TElement, TEnumerator> where Enumerator<TEnumerator, TElement>
'    decl fun GetEnumerator(select obj:T): TEnumerator
'end

'concept Enumerator<T, TElement>
'    decl fun Current(select e:T):TElement
'    decl fun MoveNext(select e:T)
'end

'func Where<T, TE>(enumerable:T, fun(TE)bool predicate): T where Enumerable<T, TE>
'    
'end

'=====overloadable operators=====

'binary
concept BinaryAdd<TA, TB, TR> where (TA, TB => TR)
    decl operator+(a:TA, b:TB):TR
end

concept BinarySubstract<TA, TB, TR> where (TA, TB => TR)
    decl operator-(a:TA, b:TB):TR
end

concept BinaryMultiply<TA, TB, TR> where (TA, TB => TR)
    decl operator*(a:TA, b:TB):TR
end

concept BinaryDivide<TA, TB, TR> where (TA, TB => TR)
    decl operator/(a:TA, b:TB):TR
end

concept BinaryModulo<TA, TB, TR> where (TA, TB => TR)
    decl operator mod(a:TA, b:TB):TR
end

concept BinaryShiftLeft<TA, TB, TR> where (TA, TB => TR)
    decl operator<<(a:TA, b:TB):TR
end

concept BinaryShiftRight<TA, TB, TR> where (TA, TB => TR)
    decl operator>>(a:TA, b:TB):TR
end

concept BinaryEqual<TA, TB, TR> where (TA, TB => TR)
    decl operator=(a:TA, b:TB):TR
end

concept BinaryNotEqual<TA, TB, TR> where (TA, TB => TR)
    decl operator<>(a:TA, b:TB):TR
end

concept BinaryLess<TA, TB, TR> where (TA, TB => TR)
    decl operator<(a:TA, b:TB):TR
end

concept BinaryLessEqual<TA, TB, TR> where (TA, TB => TR)
    decl operator<=(a:TA, b:TB):TR
end

concept BinaryGreater<TA, TB, TR> where (TA, TB => TR)
    decl operator>(a:TA, b:TB):TR
end

concept BinaryGreaterEqual<TA, TB, TR> where (TA, TB => TR)
    decl operator>=(a:TA, b:TB):TR
end

concept BinaryAnd<TA, TB, TR> where (TA, TB => TR)
    decl operator and(a:TA, b:TB):TR
end

concept BinaryOr<TA, TB, TR> where (TA, TB => TR)
    decl operator or(a:TA, b:TB):TR
end

concept BinaryXor<TA, TB, TR> where (TA, TB => TR)
    decl operator xor(a:TA, b:TB):TR
end

'unary
concept UnaryPlus<T, TR> where (T => TR)
    decl operator+(a:T):TR
end

concept UnaryMinus<T, TR> where (T => TR)
    decl operator-(a:T):TR
end

concept UnaryNot<T, TR> where (T => TR)
    decl operator not(a:T):TR
end

concept UnaryCast<TFrom, TTo>
    decl operator cast(a:TFrom):TTo
end

'===== comparable =====
concept Equality<T>
    decl fun Equals(a:T, b:T):bool
end

concept EqualityOperators<T> where 
    BinaryEqual<T, T, bool>,
    BinaryNotEqual<T, T, bool>,
    Equality<T>

    operator=(a, b)
        return Equals(a, b)
    end

    operator<>(a, b)
        return not Equals(a, b)
    end
end

concept Comparable<T> where Equality<T>
    decl fun Compare(a:T, b:T):int
    fun Min(a:T, b:T):T
        if Compare(a, b) < 0 then return a else return b
    end

    fun Max(a:T, b:T):T
        if Compare(a, b) < 0 then return b else return a
    end
end

concept ComparableOperators<T> where 
    EqualityOperators<T>,
    BinaryLess<T, T, bool>,
    BinaryLessEqual<T, T, bool>,
    BinaryGreater<T, T, bool>,
    BinaryGreaterEqual<T, T, bool>,
    Comparable<T>

    'TODO: default implementations for operators
end

'===== numeric types =====
concept Number<T> where
    BinaryAdd<T, T, T>,
    BinaryMultiply<T, T, T>,
    BinarySubstract<T, T, T>,
    UnaryMinus<T, T>,
    UnaryPlus<T, T>
                            
    decl fun Abs(x:T):T
    decl fun Sign(x:T):T
end

concept Real<T> where
    Number<T>,
    ComparableOperators<T>
end

concept Integral<T> where 
    Real<T>,
    BinaryModulo<T>
end

concept BitOperators<T> where
    EqualityOperators<T>,
    BinaryAnd<T, T, T>,
    BinaryOr<T, T, T>,
    BinaryXor<T, T, T>,
    BinaryShiftRight<T, int, T>,
    BinaryShiftLeft<T, int, T>,
    UnaryNot<T, T>
end
